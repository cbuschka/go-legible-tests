// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package replication

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockmetricsSender creates a new instance of mockmetricsSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockmetricsSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockmetricsSender {
	mock := &mockmetricsSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockmetricsSender is an autogenerated mock type for the metricsSender type
type mockmetricsSender struct {
	mock.Mock
}

type mockmetricsSender_Expecter struct {
	mock *mock.Mock
}

func (_m *mockmetricsSender) EXPECT() *mockmetricsSender_Expecter {
	return &mockmetricsSender_Expecter{mock: &_m.Mock}
}

// ReportFailure provides a mock function for the type mockmetricsSender
func (_mock *mockmetricsSender) ReportFailure(err error) {
	_mock.Called(err)
	return
}

// mockmetricsSender_ReportFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportFailure'
type mockmetricsSender_ReportFailure_Call struct {
	*mock.Call
}

// ReportFailure is a helper method to define mock.On call
//   - err error
func (_e *mockmetricsSender_Expecter) ReportFailure(err interface{}) *mockmetricsSender_ReportFailure_Call {
	return &mockmetricsSender_ReportFailure_Call{Call: _e.mock.On("ReportFailure", err)}
}

func (_c *mockmetricsSender_ReportFailure_Call) Run(run func(err error)) *mockmetricsSender_ReportFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockmetricsSender_ReportFailure_Call) Return() *mockmetricsSender_ReportFailure_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockmetricsSender_ReportFailure_Call) RunAndReturn(run func(err error)) *mockmetricsSender_ReportFailure_Call {
	_c.Run(run)
	return _c
}

// ReportSuccess provides a mock function for the type mockmetricsSender
func (_mock *mockmetricsSender) ReportSuccess(count int) {
	_mock.Called(count)
	return
}

// mockmetricsSender_ReportSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportSuccess'
type mockmetricsSender_ReportSuccess_Call struct {
	*mock.Call
}

// ReportSuccess is a helper method to define mock.On call
//   - count int
func (_e *mockmetricsSender_Expecter) ReportSuccess(count interface{}) *mockmetricsSender_ReportSuccess_Call {
	return &mockmetricsSender_ReportSuccess_Call{Call: _e.mock.On("ReportSuccess", count)}
}

func (_c *mockmetricsSender_ReportSuccess_Call) Run(run func(count int)) *mockmetricsSender_ReportSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockmetricsSender_ReportSuccess_Call) Return() *mockmetricsSender_ReportSuccess_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockmetricsSender_ReportSuccess_Call) RunAndReturn(run func(count int)) *mockmetricsSender_ReportSuccess_Call {
	_c.Run(run)
	return _c
}
