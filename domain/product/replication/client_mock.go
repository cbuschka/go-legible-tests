// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package replication

import (
	mock "github.com/stretchr/testify/mock"
	"github.io/cbuschka/go-legible-tests/domain/product"
)

// newMockclient creates a new instance of mockclient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockclient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockclient {
	mock := &mockclient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockclient is an autogenerated mock type for the client type
type mockclient struct {
	mock.Mock
}

type mockclient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockclient) EXPECT() *mockclient_Expecter {
	return &mockclient_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type mockclient
func (_mock *mockclient) Fetch() ([]product.Product, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]product.Product, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []product.Product); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockclient_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type mockclient_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *mockclient_Expecter) Fetch() *mockclient_Fetch_Call {
	return &mockclient_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *mockclient_Fetch_Call) Run(run func()) *mockclient_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockclient_Fetch_Call) Return(products []product.Product, err error) *mockclient_Fetch_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *mockclient_Fetch_Call) RunAndReturn(run func() ([]product.Product, error)) *mockclient_Fetch_Call {
	_c.Call.Return(run)
	return _c
}
