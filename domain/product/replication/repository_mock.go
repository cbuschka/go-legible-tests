// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package replication

import (
	mock "github.com/stretchr/testify/mock"
	"github.io/cbuschka/go-legible-tests/domain/product"
)

// newMockrepository creates a new instance of mockrepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockrepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockrepository {
	mock := &mockrepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockrepository is an autogenerated mock type for the repository type
type mockrepository struct {
	mock.Mock
}

type mockrepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockrepository) EXPECT() *mockrepository_Expecter {
	return &mockrepository_Expecter{mock: &_m.Mock}
}

// FindByIDs provides a mock function for the type mockrepository
func (_mock *mockrepository) FindByIDs(productIDs []product.ID) (map[product.ID]product.Product, error) {
	ret := _mock.Called(productIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 map[product.ID]product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]product.ID) (map[product.ID]product.Product, error)); ok {
		return returnFunc(productIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]product.ID) map[product.ID]product.Product); ok {
		r0 = returnFunc(productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[product.ID]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]product.ID) error); ok {
		r1 = returnFunc(productIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockrepository_FindByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDs'
type mockrepository_FindByIDs_Call struct {
	*mock.Call
}

// FindByIDs is a helper method to define mock.On call
//   - productIDs []product.ID
func (_e *mockrepository_Expecter) FindByIDs(productIDs interface{}) *mockrepository_FindByIDs_Call {
	return &mockrepository_FindByIDs_Call{Call: _e.mock.On("FindByIDs", productIDs)}
}

func (_c *mockrepository_FindByIDs_Call) Run(run func(productIDs []product.ID)) *mockrepository_FindByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []product.ID
		if args[0] != nil {
			arg0 = args[0].([]product.ID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockrepository_FindByIDs_Call) Return(iDToProduct map[product.ID]product.Product, err error) *mockrepository_FindByIDs_Call {
	_c.Call.Return(iDToProduct, err)
	return _c
}

func (_c *mockrepository_FindByIDs_Call) RunAndReturn(run func(productIDs []product.ID) (map[product.ID]product.Product, error)) *mockrepository_FindByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type mockrepository
func (_mock *mockrepository) Save(products []product.Product) error {
	ret := _mock.Called(products)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]product.Product) error); ok {
		r0 = returnFunc(products)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockrepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type mockrepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - products []product.Product
func (_e *mockrepository_Expecter) Save(products interface{}) *mockrepository_Save_Call {
	return &mockrepository_Save_Call{Call: _e.mock.On("Save", products)}
}

func (_c *mockrepository_Save_Call) Run(run func(products []product.Product)) *mockrepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []product.Product
		if args[0] != nil {
			arg0 = args[0].([]product.Product)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockrepository_Save_Call) Return(err error) *mockrepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockrepository_Save_Call) RunAndReturn(run func(products []product.Product) error) *mockrepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
